openapi: 3.0.0
info:
  title: "FreeCad Component Management API"
  description: "An API for Component-files and their Metadata Database"
  version: "1.0.0"

servers:
  - url: "http://127.0.0.1:5000/api"
    description: Local Testing Server

components:
  schemas:

    Tag:
      type: "object"
      additionalProperties: false
      required:
        - label
      properties:
        label:
          type: "string"
          maxLength: 20
          pattern: ^[a-zA-Z0-9_]+$

    Filedata:
      type: "object"
      additionalProperties: false
      required:
        - url
        - type
        - size
      properties:
        url:
          type: "string"
          maxLength: 200
          pattern: https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)
        metadata_id:
          type: "string"
          maxLength: 32
          pattern: ^\w{32}$
        type:
          type: "string"
          enum:
            - step
            - fcstd
            - fcstd1
            - stl
            - stp
        size:
          type: number
          minimum: 0
          maximum: 100000000
          format: double

    Metadata:
      type: "object"
      additionalProperties: false
      required:
        - name
        - version
        - maintainer
        - license_id
      properties:
        name:
          type: "string"
          pattern: ^[\w ]+$
          maxLength: 50
        version:
          type: "string"
          pattern: ^[\d.]+$
          maxLength: 20
        maintainer:
          type: "string"
          pattern: ([a-zA-Z0-9+._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)
          maxLength: 50
        author:
          type: "string"
          pattern: ([a-zA-Z0-9+._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)
          maxLength: 50
        thumbnail:
          type: "string"
          pattern: https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)
          maxLength: 200
        description:
          type: "string"
          pattern: ^[\w ]+$
          maxLength: 500
        rating:
          type: "integer"
          maximum: 5
          minimum: 0
          format: int32
        license_id:
          type: "string"
          maxLength: 32
          pattern: ^\w{32}$

    Tags:
      type: "array"
      additionalProperties: false
      items:
        type: "string"
        # pattern: ^[a-zA-Z0-9_]+$
        maxLength: 32
      example: ["laptop", "monitor"]
      uniqueItems: true
      maxItems: 32

    Attribute:
      type: "object"
      properties:
        key:
          type: "string"
          # pattern: ^[a-zA-Z0-9_]+$
          maxLength: 32
        value:
          type: "string"
          # pattern: ^[a-zA-Z0-9_]+$
          maxLength: 32
      additionalProperties: false

    Attributes:
      type: "array"
      additionalProperties: false
      items:
        $ref: "#/components/schemas/Attribute"
      maxItems: 32

    Component:
      type: "object"
      additionalProperties: false
      required:
        - "tags"
        - "component_files"
        - "repository"
        - "branch"
        - "name"
        - "version"
        - "maintainer"
        - "license_id"
      properties:
        component_files:
          type: array
          items:
            $ref: "#/components/schemas/File"
          maxItems: 10
        thumbnail_image:
          $ref: "#/components/schemas/File"
        repository:
          type: string
          pattern: ^[\w -_]+$
          maxLength: 40
        branch:
          type: string
          pattern: ^[\w ]+$
          maxLength: 62
        tags:
          $ref: "#/components/schemas/Tags"
        name:
          type: "string"
          pattern: ^[\w ]+$
          maxLength: 50
        version:
          type: "string"
          pattern: ^[\d.]+$
          maxLength: 20
        maintainer:
          type: "string"
          pattern: ([a-zA-Z0-9+._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)
          maxLength: 50
        author:
          type: "string"
          pattern: ([a-zA-Z0-9+._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)
          maxLength: 50
        description:
          type: "string"
          # pattern: ^[\w ]+$
          maxLength: 500
        license_id:
          type: "string"
          maxLength: 32
          pattern: ^\w{32}$
        attributes:
          $ref: "#/components/schemas/Attributes"

    File:
      type: string
      additionalProperties: false
      format: binary
      maxLength: 1048576


    ComponentFiles:
      type: object
      additionalProperties: false
      required:
        - "component_files"
        - "repository"
        - "branch"
        - "metadata_id"
      properties:
        component_files:
          type: array
          items:
            $ref: "#/components/schemas/File"
          maxItems: 10
        thumbnail_image:
          $ref: "#/components/schemas/File"
        repository:
          type: string
          pattern: ^[\w ]+$
          maxLength: 40
        branch:
          type: string
          pattern: ^[\w ]+$
          maxLength: 62
        metadata_id:
          type: string
          maxLength: 32
          pattern: ^\w{32}$

  parameters:

    search_str:
      name: "search_str"
      description: "Label of the tag to get"
      in: query
      required: False
      schema:
        type: "string"
        example: "cable"
        pattern: ^[\w ]+$
        maxLength: 100

    pk:
      name: "pk"
      description: "Primary Key of the object to get"
      in: path
      required: True
      schema:
        type: "string"
        maxLength: 32
        pattern: ^\w{32}$

    page:
      name: "page"
      description: "page number"
      in: query
      required: False
      schema:
        type: "integer"
        example: 2
        maximum: 2048
        minimum: 1
        format: int64

    page_size:
      name: "page_size"
      description: "size of page"
      in: query
      required: False
      schema:
        type: "integer"
        example: 4
        maximum: 100
        minimum: 1
        format: int32

    sort_by:
      name: "sort_by"
      description: "by what column to sort"
      in: query
      required: False
      schema:
        type: "string"
        example: "name"
        pattern: ^[\w]+$
        maxLength: 32

    sort_ord:
      name: "sort_ord"
      description: "sort in ascending or descending order"
      in: query
      required: False
      schema:
        type: "string"
        enum:
          - asc
          - desc
        example: "desc"

    tags:
      name: "tags[]"
      description: "list of tags"
      in: query
      required: False
      schema:
        type: "array"
        items:
          type: string
          pattern: ^[a-zA-Z0-9_]+$
          maxLength: 32
        maxItems: 32
      # collectionFormat: multi

    columns:
      name: "columns[]"
      description: "list of columns"
      in: query
      required: False
      schema:
        type: "array"
        items:
          type: string
          pattern: ^[\w ]+$
          maxLength: 32
        maxItems: 10
      # collectionFormat: multi

    file_types:
      name: "file_types[]"
      description: "list of filetypes"
      in: query
      required: False
      schema:
        type: "array"
        items:
          type: string
          pattern: ^[\w ]+$
          maxLength: 32
        maxItems: 20
      # collectionFormat: multi

paths:
  /tag:
    get:
      operationId: "src.models.tags.operations.read_page"
      tags:
        - "Tags"
      summary: "Gives a paginated list of all tags"
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_size"
      responses:
        "200":
          description: "Successfully read tags list"

    post:
      operationId: "src.models.tags.operations.create"
      tags:
        - Tags
      summary: "Create a Tag"
      requestBody:
        description: "Tag to create"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "tag"
              $ref: "#/components/schemas/Tag"
      responses:
        "201":
          description: "Successfully created a tag"


  /tag/{pk}:
    get:
      operationId: "src.models.tags.operations.read_one"
      tags:
        - Tags
      summary: "Read one tag"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "200":
          description: "Successfully read tag"

    delete:
      tags:
        - Tags
      operationId: "src.models.tags.operations.delete"
      summary: "Delete a tag"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "204":
          description: "Successfully deleted tag"

  /tag/search:
    get:
      operationId: "src.models.tags.operations.search"
      tags:
        - Tags
        - Search
      summary: "search for the tags matching label"
      parameters:
        - $ref: "#/components/parameters/search_str"
      responses:
        "200":
          description: "Successfully searched tags"


  /file:
    get:
      operationId: "src.models.files.operations.read_page"
      tags:
        - "Files"
      summary: "Gives a paginated list of all files"
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_size"
      responses:
        "200":
          description: "Successfully read files list"

    post:
      operationId: "src.models.files.operations.create"
      tags:
        - "Files"
      summary: "Create a File"
      requestBody:
          description: "File to create"
          required: True
          content:
            application/json:
              schema:
                x-body-name: "file_data"
                $ref: "#/components/schemas/Filedata"
      responses:
        "201":
          description: "Successfully created a file"

  /file/upload:
    post:
      operationId: "src.models.files.operations.upload_to_github"
      tags:
        - "Files"
      summary: "Create a File"
      parameters:
        - in: header
          name: X-Access-Token
          description: "github access token"
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              x-body-name: "upload_info"
              $ref: "#/components/schemas/ComponentFiles"
      responses:
        "201":
          description: "Successfully created a file"

  /file/{pk}:
    get:
      operationId: "src.models.files.operations.read_one"
      tags:
        - Files
      summary: "Read one file"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "200":
          description: "Successfully read file"

    delete:
      tags:
        - Files
      operationId: "src.models.files.operations.delete"
      summary: "Delete a file"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "204":
          description: "Successfully deleted file"


  /metadata:
    get:
      operationId: "src.models.metadatas.operations.read_page"
      tags:
        - "Metadatas"
      summary: "Gives a paginated list of all metadatas"
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_size"
      responses:
        "200":
          description: "Successfully read metadatas list"

    post:
      operationId: "src.models.metadatas.operations.create"
      tags:
        - "Metadatas"
      summary: "Create a File"
      requestBody:
        description: "File to create"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "metadata"
              $ref: "#/components/schemas/Metadata"
      responses:
        "201":
          description: "Successfully created a metadata"


  /metadata/search:
    get:
      operationId: "src.models.metadatas.operations.search"
      tags:
        - "Metadatas"
        - "Search"
      summary: "Read the list of all metadatas"
      parameters:
        - $ref: "#/components/parameters/search_str"
      responses:
        "200":
          description: "Successfully searched metadata"

  /metadata/{pk}:
    get:
      operationId: "src.models.metadatas.operations.read_one"
      tags:
        - Metadatas
      summary: "Read one metadata"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "200":
          description: "Successfully read metadata"

    delete:
      tags:
        - Metadatas
      operationId: "src.models.metadatas.operations.delete"
      summary: "Delete a metadata"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "204":
          description: "Successfully deleted metadata"

  /metadata/{pk}/tags:
    get:
      operationId: "src.models.metadatas.operations.read_tags"
      tags:
        - Metadatas
        - Tags
      summary: "Read tags of metadata"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "200":
          description: "Successfully read tags"

    patch:
      operationId: "src.models.metadatas.operations.add_tags"
      tags:
        - Metadatas
        - Tags
      summary: "Add tags to a metadata"
      parameters:
        - $ref: "#/components/parameters/pk"
      requestBody:
        description: "Tags to add"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "tags"
              $ref: "#/components/schemas/Tags"
      responses:
        "201":
          description: "Successfully added tags to metadata"

  /metadata/{pk}/files:
    get:
      operationId: "src.models.metadatas.operations.read_files"
      tags:
        - Metadatas
        - Files
      summary: "Read files of metadata"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "200":
          description: "Successfully read files"

  /metadata/{pk}/attributes:
    get:
      operationId: "src.models.metadatas.operations.read_attributes"
      tags:
        - Metadatas
        - Attributes
      summary: "Read attributes of metadata"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "200":
          description: "Successfully read attributes"

    patch:
      operationId: "src.models.metadatas.operations.add_attributes"
      tags:
        - Metadatas
        - Attributes
      summary: "Add attributes to a metadata"
      parameters:
        - $ref: "#/components/parameters/pk"
      requestBody:
        description: "Attributes to add"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "attributes"
              $ref: "#/components/schemas/Attributes"
      responses:
        "201":
          description: "Successfully added attributes to metadata"


  /license:
    get:
      operationId: "src.models.licenses.operations.read_all"
      tags:
        - "Licenses"
      summary: "Read the list of all licenses"
      responses:
        "200":
          description: "Successfully read licenses list"

  /license/{pk}:
    get:
      operationId: "src.models.licenses.operations.read_one"
      tags:
        - "Licenses"
      summary: "Read one license"
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "200":
          description: "Successfully read license"
  /component:
    get:
      operationId: "src.models.components.operations.read"
      tags:
        - "Component"
      summary: "Gives Paginated list of all components"
      description: 'To search, filter, sort components'
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_size"
        - $ref: "#/components/parameters/search_str"
        - $ref: "#/components/parameters/sort_by"
        - $ref: "#/components/parameters/sort_ord"
        - $ref: "#/components/parameters/file_types"
        - $ref: "#/components/parameters/tags"
        - $ref: "#/components/parameters/columns"
      responses:
        '200':
          description: OK

    post:
      operationId: "src.models.components.operations.create"
      tags:
        - "Component"
      summary: "Create a new component from the given data"
      parameters:
        - in: header
          name: X-Access-Token
          description: "github access token"
          schema:
            type: string
      requestBody:
        # description: "Data to create Component"
        # required: True
        content:
          multipart/form-data:
            schema:
              x-body-name: "component_data"
              $ref: "#/components/schemas/Component"
      responses:
        "201":
          description: "Successfully created a Component"

  /auth/github:
    get:
      operationId: "src.authentication.services.auth_with_access_token"
      tags:
        - "Users"
        - "Authentications"
      summary: "Login to the API"
      parameters:
        - in: header
          name: X-Access-Token
          description: "Github Access Token"
          schema:
            type: string
      responses:
        "200":
          description: "Successfully logged in"

  /auth/github/callback:
    get:
      operationId: "src.authentication.services.github_oauth_callback"
      tags:
        - "Users"
        - "Authentications"
      summary: "Login to the API with Github"
      parameters:
        - in: query
          name: code
          description: "temporary code from github"
          schema:
            type: string
      responses:
        "200":
          description: "Successfully logged in with Github"
